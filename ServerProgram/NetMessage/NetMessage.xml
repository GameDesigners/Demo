<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NetMessage</name>
    </assembly>
    <members>
        <member name="T:NetMessage.ByteBuffer">
            <summary>
            字节缓冲类
            一条完整的数据单元结构
            【信息长度】-【信息类型标志字符串长度】-【信息类型标志】-【Json数据】
            </summary>
        </member>
        <member name="P:NetMessage.ByteBuffer.Item(System.Int32)">
            <summary>
            某个字节[无索引边界检测]
            </summary>
            <param name="index"></param>
            <returns>某个字节</returns>
        </member>
        <member name="P:NetMessage.ByteBuffer.DataLength">
            <summary>
            当前数据的长度
            </summary>
        </member>
        <member name="P:NetMessage.ByteBuffer.RemainLength">
            <summary>
            缓冲剩余的容量大小
            </summary>
        </member>
        <member name="M:NetMessage.ByteBuffer.#ctor(System.Int32)">
            <summary>
            初始化字节缓冲
            </summary>
            <param name="size">初始化的容量大小</param>
        </member>
        <member name="M:NetMessage.ByteBuffer.#ctor(System.Byte[])">
            <summary>
            初始化字节缓冲
            </summary>
            <param name="data">初始化的字节缓冲的初始数据</param>
        </member>
        <member name="M:NetMessage.ByteBuffer.CanGetMsgLength">
            <summary>
            当前缓冲的数据长度是否可以对信息长度进行解析
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetMessage.ByteBuffer.CanGetCompleteMsg">
            <summary>
            是否可以获得一条完整的数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetMessage.ByteBuffer.Read(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            从缓冲中读取完整的信息数据
            </summary>
            <param name="gets">获取的Byte数组</param>
            <param name="offset">读入的偏移量</param>
            <param name="readCount">[out]此次读取获得的数组长度</param>
            <returns>本次数据读取是否是一条完整的信息</returns>
        </member>
        <member name="M:NetMessage.ByteBuffer.Write(System.Byte[])">
            <summary>
            向字节缓冲写入字节数组
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:NetMessage.ByteBuffer.GetMsgLengthFromBytes">
            <summary>
            获取当前最新完整数据的长度
            </summary>
            <returns>若返回0，则意味着数据未完成传输</returns>
        </member>
        <member name="M:NetMessage.ByteBuffer.GetMsgSymbolLengthFromeBytes">
            <summary>
            获取信息标识符的字符串长度
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetMessage.ByteBuffer.Clear">
            <summary>
            完全清除此缓冲并恢复原来容量
            </summary>
        </member>
        <member name="M:NetMessage.ByteBuffer.ExpanCapcacityTwoTimes">
            <summary>
            将缓冲拓展两倍
            </summary>
        </member>
        <member name="M:NetMessage.ByteBuffer.ExpanCapacity(System.Int32)">
            <summary>
            拓展buffer的容量
            </summary>
            <param name="targetSize">需要添加的目标数组长度</param>
        </member>
        <member name="M:NetMessage.ByteBuffer.RevertBuffer">
            <summary>
            重新分配缓冲取的数据
            </summary>
        </member>
        <member name="T:NetMessage.ProtoName">
            <summary>
            信息事件
            </summary>
        </member>
        <member name="T:NetMessage.LengthMsgDataType">
            <summary>
            长度信息变量类型
            </summary>
        </member>
        <member name="T:NetMessage.BaseMsg">
            <summary>
            信息基类
            </summary>
        </member>
        <member name="M:NetMessage.BaseMsg.GetBytesPackage``1(System.String,``0)">
            <summary>
            根据实例获取发送信息的字节包
            </summary>
            <typeparam name="T">实例类型</typeparam>
            <param name="msg">信息实例</param>
            <returns>打包字节</returns>
        </member>
        <member name="M:NetMessage.BaseMsg.ParseBytesPage(System.Byte[],System.Int32,System.String@)">
            <summary>
            解析数据包
            </summary>
            <param name="data">实际的json数据</param>
            <param name="msgSymbolLength">信息标志的长度</param>
            <param name="typeName">[out]类型名称</param>
            <returns>解析出来的实例【装箱成根父类】</returns>
        </member>
    </members>
</doc>
